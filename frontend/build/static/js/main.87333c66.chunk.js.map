{"version":3,"sources":["logo.svg","components/FormView.js","components/Question.js","components/Search.js","components/QuestionView.js","components/Header.js","components/QuizView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FormView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitQuestion","event","preventDefault","$","ajax","url","concat","state","api_url","type","dataType","contentType","data","JSON","stringify","question","answer","difficulty","category","xhrFields","withCredentials","crossDomain","success","result","document","getElementById","reset","error","alert","handleChange","setState","defineProperty","target","name","value","categories","_this2","console","log","_this3","react_default","a","createElement","id","className","onSubmit","onChange","keys","map","key","Component","Question","visibleAnswer","_this$props","src","toLowercase","alt","onClick","questionAction","flipVisibility","style","visibility","Search","query","getInfo","submitSearch","handleInputChange","search","placeholder","ref","input","QuestionView","getQuestions","page","questions","totalQuestions","total_questions","currentCategory","current_category","getByCategory","searchTerm","action","window","confirm","num","pageNumbers","maxPage","Math","ceil","_loop","i","push","selectPage","_this4","components_Search","q","ind","components_Question","createPagination","Header","uri","location","href","origin","logo","navTo","QuizView","selectCategory","_ref","_ref$id","quizCategory","getNextQuestion","previousQuestions","toConsumableArray","currentQuestion","previous_questions","quiz_category","showAnswer","guess","forceEnd","submitGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","split","includes","length","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay","App","process","HOST","API_URL","components_Header","path","react_router_dom","basename","react_router","exact","component","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sVC8GzBC,qBAtGb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QA6BFI,eAAiB,SAACC,GAChBA,EAAMC,iBACNC,IAAEC,KAAK,CACLC,IAAG,GAAAC,OAAKb,EAAKc,MAAMC,QAAhB,cACHC,KAAM,OACNC,SAAU,OACVC,YAAa,mBACbC,KAAMC,KAAKC,UAAU,CACnBC,SAAUtB,EAAKc,MAAMQ,SACrBC,OAAQvB,EAAKc,MAAMS,OACnBC,WAAYxB,EAAKc,MAAMU,WACvBC,SAAUzB,EAAKc,MAAMW,WAEvBC,UAAW,CACTC,iBAAiB,GAEnBC,aAAa,EACbC,QAAS,SAACC,GACRC,SAASC,eAAe,qBAAqBC,SAG/CC,MAAO,SAACA,GACNC,MAAM,6DApDMnC,EA0DlBoC,aAAe,SAAC5B,GACdR,EAAKqC,SAALpC,OAAAqC,EAAA,EAAArC,CAAA,GAAgBO,EAAM+B,OAAOC,KAAOhC,EAAM+B,OAAOE,SAzDjDzC,EAAKc,MAAQ,CACXQ,SAAU,GACVC,OAAQ,GACRC,WAAY,EACZC,SAAU,EACViB,WAAY,GACZ3B,QAAS,IARKf,mFAYC,IAAA2C,EAAAxC,KACjByC,QAAQC,IAhBS,YAiBjBD,QAAQC,IAAI1C,KAAKW,MAAMC,SACvBL,IAAEC,KAAK,CACLC,IAAG,GAAAC,OAAKV,KAAKW,MAAMC,QAAhB,eACHC,KAAM,MACNa,QAAS,SAACC,GACRa,EAAKN,SAAS,CAAEK,WAAYZ,EAAOY,cAGrCR,MAAO,SAACA,GACNC,MAAM,gGAuCH,IAAAW,EAAA3C,KACP,OACE4C,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACNH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,QAAME,UAAU,YAAYD,GAAG,oBAAoBE,SAAUjD,KAAKI,gBAChEwC,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,OAAOwB,KAAK,WAAWa,SAAUlD,KAAKiC,gBAEpDW,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,OAAOwB,KAAK,SAASa,SAAUlD,KAAKiC,gBAElDW,EAAAC,EAAAC,cAAA,0BAEEF,EAAAC,EAAAC,cAAA,UAAQT,KAAK,aAAaa,SAAUlD,KAAKiC,cACvCW,EAAAC,EAAAC,cAAA,UAAQR,MAAM,KAAd,KACAM,EAAAC,EAAAC,cAAA,UAAQR,MAAM,KAAd,KACAM,EAAAC,EAAAC,cAAA,UAAQR,MAAM,KAAd,KACAM,EAAAC,EAAAC,cAAA,UAAQR,MAAM,KAAd,KACAM,EAAAC,EAAAC,cAAA,UAAQR,MAAM,KAAd,OAGJM,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,UAAQT,KAAK,WAAWa,SAAUlD,KAAKiC,cACpCnC,OAAOqD,KAAKnD,KAAKW,MAAM4B,YAAYa,IAAI,SAAAL,GACpC,OACEH,EAAAC,EAAAC,cAAA,UAAQO,IAAKN,EAAIT,MAAOS,GAAKJ,EAAKhC,MAAM4B,WAAWQ,QAK7DH,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,SAASmC,UAAU,SAASV,MAAM,oBAhGjCgB,cCgCRC,qBAlCb,SAAAA,IAAa,IAAA1D,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACX1D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,QACKW,MAAQ,CACX6C,eAAe,GAHN3D,gFAQXG,KAAKkC,SAAS,CAACsB,eAAgBxD,KAAKW,MAAM6C,iDAGnC,IAAAhB,EAAAxC,KAAAyD,EAC4CzD,KAAKJ,MAAhDuB,EADDsC,EACCtC,SAAUC,EADXqC,EACWrC,OAAQE,EADnBmC,EACmBnC,SAAUD,EAD7BoC,EAC6BpC,WACpC,OACEuB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAY7B,GAC3ByB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWU,IAAG,GAAAhD,OAAKY,EAASqC,cAAd,QAAmCC,IAAKtC,IACrEsB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAf,eAAyC3B,GACzCuB,EAAAC,EAAAC,cAAA,OAAKY,IAAI,aAAaV,UAAU,SAASa,QAAS,kBAAMrB,EAAK5C,MAAMkE,eAAe,WAAWF,IAAI,YAGnGhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACXa,QAAS,kBAAMrB,EAAKuB,mBACnB/D,KAAKW,MAAM6C,cAAgB,OAAS,OAFzC,WAIAZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAACC,WAAcjE,KAAKW,MAAM6C,cAAgB,UAAY,WAAnE,WAAuFpC,YA5B1EkC,cC4BRY,6MA7BbvD,MAAQ,CACNwD,MAAO,MAGTC,QAAU,SAAC/D,GACTA,EAAMC,iBACNT,EAAKD,MAAMyE,aAAaxE,EAAKc,MAAMwD,UAGrCG,kBAAoB,WAClBzE,EAAKqC,SAAS,CACZiC,MAAOtE,EAAK0E,OAAOjC,iFAId,IAAAE,EAAAxC,KACP,OACE4C,EAAAC,EAAAC,cAAA,QAAMG,SAAUjD,KAAKoE,SACnBxB,EAAAC,EAAAC,cAAA,SACE0B,YAAY,sBACZC,IAAK,SAAAC,GAAK,OAAIlC,EAAK+B,OAASG,GAC5BxB,SAAUlD,KAAKsE,oBAEjB1B,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,SAASyB,MAAM,SAASU,UAAU,mBAxBjCM,aC6JNqB,cAvJb,SAAAA,IAAa,IAAA9E,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2E,IACX9E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6E,GAAAxE,KAAAH,QAeF4E,aAAe,WACbrE,IAAEC,KAAK,CACLC,IAAG,GAAAC,OAAKb,EAAKc,MAAMC,QAAhB,oBAAAF,OAA0Cb,EAAKc,MAAMkE,MACxDhE,KAAM,MACNa,QAAS,SAACC,GACR9B,EAAKqC,SAAS,CACZ4C,UAAWnD,EAAOmD,UAClBC,eAAgBpD,EAAOqD,gBACvBzC,WAAYZ,EAAOY,WACnB0C,gBAAiBtD,EAAOuD,oBAG5BnD,MAAO,SAACA,GACNC,MAAM,kEA7BCnC,EAqDbsF,cAAe,SAACpC,GACdxC,IAAEC,KAAK,CACLC,IAAG,GAAAC,OAAKb,EAAKc,MAAMC,QAAhB,gBAAAF,OAAsCqC,EAAtC,cACHlC,KAAM,MACNa,QAAS,SAACC,GACR9B,EAAKqC,SAAS,CACZ4C,UAAWnD,EAAOmD,UAClBC,eAAgBpD,EAAOqD,gBACvBC,gBAAiBtD,EAAOuD,oBAG5BnD,MAAO,SAACA,GACNC,MAAM,kEAjECnC,EAuEbwE,aAAe,SAACe,GACd7E,IAAEC,KAAK,CACLC,IAAG,GAAAC,OAAKb,EAAKc,MAAMC,QAAhB,cACHC,KAAM,OACNC,SAAU,OACVC,YAAa,mBACbC,KAAMC,KAAKC,UAAU,CAACkE,WAAYA,IAClC7D,UAAW,CACTC,iBAAiB,GAEnBC,aAAa,EACbC,QAAS,SAACC,GACR9B,EAAKqC,SAAS,CACZ4C,UAAWnD,EAAOmD,UAClBC,eAAgBpD,EAAOqD,gBACvBC,gBAAiBtD,EAAOuD,oBAG5BnD,MAAO,SAACA,GACNC,MAAM,kEA1FCnC,EAgGbiE,eAAiB,SAACf,GAAD,OAAQ,SAACsC,GACV,WAAXA,GACEC,OAAOC,QAAQ,kDAChBhF,IAAEC,KAAK,CACLC,IAAG,GAAAC,OAAKb,EAAKc,MAAMC,QAAhB,eAAAF,OAAqCqC,GACxClC,KAAM,SACNa,QAAS,SAACC,GACR9B,EAAK+E,gBAEP7C,MAAO,SAACA,GACNC,MAAM,mEAxGdnC,EAAKc,MAAQ,CACXmE,UAAW,GACXD,KAAM,EACNE,eAAgB,EAChBxC,WAAY,GACZ0C,gBAAiB,KACjBrE,QAAS,IARAf,mFAaXG,KAAK4E,kDAsBIY,GAAK,IAAAhD,EAAAxC,KACdA,KAAKkC,SAAS,CAAC2C,KAAMW,GAAM,kBAAMhD,EAAKoC,4DAMtC,IAHgB,IAAAjC,EAAA3C,KACZyF,EAAc,GACdC,EAAUC,KAAKC,KAAK5F,KAAKW,MAAMoE,eAAiB,IAFpCc,EAAA,SAGPC,GACPL,EAAYM,KACVnD,EAAAC,EAAAC,cAAA,QACEO,IAAKyC,EACL9C,UAAS,YAAAtC,OAAcoF,IAAMnD,EAAKhC,MAAMkE,KAAO,SAAW,IAC1DhB,QAAS,WAAOlB,EAAKqD,WAAWF,KAAMA,KALnCA,EAAI,EAAGA,GAAKJ,EAASI,IAAKD,EAA1BC,GAQT,OAAOL,mCAgEA,IAAAQ,EAAAjG,KACP,OACE4C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,MAAIe,QAAS,WAAOoC,EAAKrB,iBAAzB,cACAhC,EAAAC,EAAAC,cAAA,UACGhD,OAAOqD,KAAKnD,KAAKW,MAAM4B,YAAYa,IAAI,SAACL,GAAD,OACtCH,EAAAC,EAAAC,cAAA,MAAIO,IAAKN,EAAIc,QAAS,WAAOoC,EAAKd,cAAcpC,KAC7CkD,EAAKtF,MAAM4B,WAAWQ,GACvBH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWU,IAAG,GAAAhD,OAAKuF,EAAKtF,MAAM4B,WAAWQ,GAA3B,QAAsCa,IAAI,SAI7EhB,EAAAC,EAAAC,cAACoD,EAAD,CAAQ7B,aAAcrE,KAAKqE,gBAE7BzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,uBACC9C,KAAKW,MAAMmE,UAAU1B,IAAI,SAAC+C,EAAGC,GAAJ,OACxBxD,EAAAC,EAAAC,cAACuD,EAAD,CACEhD,IAAK8C,EAAEpD,GACP5B,SAAUgF,EAAEhF,SACZC,OAAQ+E,EAAE/E,OACVE,SAAU2E,EAAKtF,MAAM4B,WAAW4D,EAAE7E,UAClCD,WAAY8E,EAAE9E,WACdyC,eAAgBmC,EAAKnC,eAAeqC,EAAEpD,QAG1CH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACZhD,KAAKsG,6BA/IShD,8BCqBZiD,uLApBPC,GACJlB,OAAOmB,SAASC,KAAOpB,OAAOmB,SAASE,OAAS,KAAOH,EACxB,iCAA3BlB,OAAOmB,SAASE,SAClBrB,OAAOmB,SAASC,KAAOpB,OAAOmB,SAASE,OAAS,gBAAkBH,oCAI7D,IAAA3G,EAAAG,KACP,OACE4C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,OAAKY,IAAKkD,IAAMhD,IAAI,KACpBhB,EAAAC,EAAAC,cAAA,MAAIe,QAAS,WAAOhE,EAAKgH,MAAM,MAA/B,eACAjE,EAAAC,EAAAC,cAAA,MAAIe,QAAS,WAAOhE,EAAKgH,MAAM,MAA/B,QACAjE,EAAAC,EAAAC,cAAA,MAAIe,QAAS,WAAOhE,EAAKgH,MAAM,UAA/B,WACAjE,EAAAC,EAAAC,cAAA,MAAIe,QAAS,WAAOhE,EAAKgH,MAAM,WAA/B,gBAhBavD,sBC0KNwD,qBAxKb,SAAAA,EAAYlH,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8G,IAChBjH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgH,GAAA3G,KAAAH,QA6BF+G,eAAiB,SAAAC,GAAkB,IAAhBnG,EAAgBmG,EAAhBnG,KAAgBoG,EAAAD,EAAVjE,UAAU,IAAAkE,EAAP,EAAOA,EACjCpH,EAAKqC,SAAS,CAACgF,aAAc,CAACrG,OAAMkC,OAAMlD,EAAKsH,kBA/B/BtH,EAkClBoC,aAAe,SAAC5B,GACdR,EAAKqC,SAALpC,OAAAqC,EAAA,EAAArC,CAAA,GAAgBO,EAAM+B,OAAOC,KAAOhC,EAAM+B,OAAOE,SAnCjCzC,EAsClBsH,gBAAkB,WAChB,IAAMC,EAAiBtH,OAAAuH,EAAA,EAAAvH,CAAOD,EAAKc,MAAMyG,mBACtCvH,EAAKc,MAAM2G,gBAAgBvE,IAAMqE,EAAkBrB,KAAKlG,EAAKc,MAAM2G,gBAAgBvE,IAEtFxC,IAAEC,KAAK,CACLC,IAAG,GAAAC,OAAKb,EAAKc,MAAMC,QAAhB,YACHC,KAAM,OACNC,SAAU,OACVC,YAAa,mBACbC,KAAMC,KAAKC,UAAU,CACnBqG,mBAAoBH,EACpBI,cAAe3H,EAAKc,MAAMuG,eAE5B3F,UAAW,CACTC,iBAAiB,GAEnBC,aAAa,EACbC,QAAS,SAACC,GACR9B,EAAKqC,SAAS,CACZuF,YAAY,EACZL,kBAAmBA,EACnBE,gBAAiB3F,EAAOR,SACxBuG,MAAO,GACPC,UAAUhG,EAAOR,YAIrBY,MAAO,SAACA,GACNC,MAAM,8DAlEMnC,EAwElB+H,YAAc,SAACvH,GACbA,EAAMC,iBACcT,EAAKc,MAAM+G,MAAMG,QAAQ,+BAA+B,IAAIC,cAAhF,IACIC,EAAYlI,EAAKmI,iBACrBnI,EAAKqC,SAAS,CACZ+F,WAAaF,EAAmClI,EAAKc,MAAMsH,WAAa,EAAhDpI,EAAKc,MAAMsH,WACnCR,YAAY,KA9EE5H,EAkFlBqI,YAAc,WACZrI,EAAKqC,SAAS,CACZgF,aAAc,KACdE,kBAAmB,GACnBK,YAAY,EACZQ,WAAY,EACZX,gBAAiB,GACjBI,MAAO,GACPC,UAAU,KA1FI9H,EA6HlBmI,eAAiB,WACf,IAAMG,EAActI,EAAKc,MAAM+G,MAAMG,QAAQ,+BAA+B,IAAIC,cAEhF,OADoBjI,EAAKc,MAAM2G,gBAAgBlG,OAAO0G,cAAcM,MAAM,KACvDC,SAASF,IA9H5BtI,EAAKc,MAAQ,CACTuG,aAAc,KACdE,kBAAmB,GACnBK,YAAY,EACZlF,WAAY,GACZ0F,WAAY,EACZX,gBAAiB,GACjBI,MAAO,GACPC,UAAU,EACV/G,QAAS,IAXGf,mFAeC,IAAA2C,EAAAxC,KACjBO,IAAEC,KAAK,CACLC,IAAG,GAAAC,OAAKV,KAAKW,MAAMC,QAAhB,eACHC,KAAM,MACNa,QAAS,SAACC,GACRa,EAAKN,SAAS,CAAEK,WAAYZ,EAAOY,cAGrCR,MAAO,SAACA,GACNC,MAAM,uGAsEG,IAAAW,EAAA3C,KACX,OACI4C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAf,mBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgBa,QAAS7D,KAAK+G,gBAA7C,OACCjH,OAAOqD,KAAKnD,KAAKW,MAAM4B,YAAYa,IAAI,SAAAL,GACxC,OACEH,EAAAC,EAAAC,cAAA,OACEO,IAAKN,EACLT,MAAOS,EACPC,UAAU,gBACVa,QAAS,kBAAMlB,EAAKoE,eAAe,CAAClG,KAAK8B,EAAKhC,MAAM4B,WAAWQ,GAAKA,SACnEJ,EAAKhC,MAAM4B,WAAWQ,mDAUzC,OACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAf,wBAAoDhD,KAAKW,MAAMsH,YAC/DrF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAAoBa,QAAS7D,KAAKkI,aAAjD,gEAYgBlI,KAAKW,MAAM+G,MAAMG,QAAQ,+BAA+B,IAAIC,cAAhF,IACIC,EAAY/H,KAAKgI,iBACrB,OACEpF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAiBhD,KAAKW,MAAM2G,gBAAgBnG,UAC3DyB,EAAAC,EAAAC,cAAA,OAAKE,UAAS,GAAAtC,OAAKqH,EAAW,UAAY,UAAYA,EAAW,oBAAsB,sBACvFnF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAehD,KAAKW,MAAM2G,gBAAgBlG,QACzDwB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBAAuBa,QAAS7D,KAAKmH,iBAApD,yDAMJ,OApJqB,IAoJdnH,KAAKW,MAAMyG,kBAAkBkB,QAA+BtI,KAAKW,MAAMgH,SAC1E3H,KAAKuI,mBACLvI,KAAKW,MAAM8G,WACTzH,KAAKwI,sBAEL5F,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAiBhD,KAAKW,MAAM2G,gBAAgBnG,UAC3DyB,EAAAC,EAAAC,cAAA,QAAMG,SAAUjD,KAAK4H,aACnBhF,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,OAAOwB,KAAK,QAAQa,SAAUlD,KAAKiC,eAC/CW,EAAAC,EAAAC,cAAA,SAAOE,UAAU,sBAAsBnC,KAAK,SAASyB,MAAM,qDAQrE,OAAOtC,KAAKW,MAAMuG,aACZlH,KAAKyI,aACLzI,KAAK0I,uBArKQpF,cCkCRqF,mLAtBXlG,QAAQC,IAAI,OAAQkG,+CAAYC,MAChCpG,QAAQC,IAAI,UAAWkG,+CAAYE,SAInC,OACAlG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACiG,EAAD,CAAQC,MAAI,IACZpG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAQC,SAAUN,KAChBhG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACEvG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOH,KAAK,IAAII,OAAK,EAACC,UAAW1E,IACjC/B,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOH,KAAK,OAAOK,UAAW1J,IAC9BiD,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOH,KAAK,QAAQK,UAAWvC,IAC/BlE,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOE,UAAW1E,cAjBVrB,aCHEgG,QACW,cAA7BhE,OAAOmB,SAAS8C,UAEe,UAA7BjE,OAAOmB,SAAS8C,UAEhBjE,OAAOmB,SAAS8C,SAASC,MACvB,2DCVNC,IAASC,OAAO9G,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAQC,SAAUN,KAAwBhG,EAAAC,EAAAC,cAAC6G,EAAD,OAAkB/H,SAASC,eAAe,SDyH9F,kBAAmB+H,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.87333c66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/FormView.css';\r\n\r\nconst API_BASE_URL = \"test 123\"\r\n\r\nclass FormView extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n      question: \"\",\r\n      answer: \"\",\r\n      difficulty: 1,\r\n      category: 1,\r\n      categories: {},\r\n      api_url: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log(API_BASE_URL);\r\n    console.log(this.state.api_url)\r\n    $.ajax({\r\n      url: `${this.state.api_url}/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  submitQuestion = (event) => {\r\n    event.preventDefault();\r\n    $.ajax({\r\n      url: `${this.state.api_url}/questions`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        question: this.state.question,\r\n        answer: this.state.answer,\r\n        difficulty: this.state.difficulty,\r\n        category: this.state.category\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        document.getElementById(\"add-question-form\").reset();\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to add question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"add-form\">\r\n        <h2>Add a New Trivia Question</h2>\r\n        <form className=\"form-view\" id=\"add-question-form\" onSubmit={this.submitQuestion}>\r\n          <label>\r\n            Question\r\n            <input type=\"text\" name=\"question\" onChange={this.handleChange}/>\r\n          </label>\r\n          <label>\r\n            Answer\r\n            <input type=\"text\" name=\"answer\" onChange={this.handleChange}/>\r\n          </label>\r\n          <label>\r\n            Difficulty\r\n            <select name=\"difficulty\" onChange={this.handleChange}>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"3\">3</option>\r\n              <option value=\"4\">4</option>\r\n              <option value=\"5\">5</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            Category\r\n            <select name=\"category\" onChange={this.handleChange}>\r\n              {Object.keys(this.state.categories).map(id => {\r\n                  return (\r\n                    <option key={id} value={id}>{this.state.categories[id]}</option>\r\n                  )\r\n                })}\r\n            </select>\r\n          </label>\r\n          <input type=\"submit\" className=\"button\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormView;\r\n","import React, { Component } from 'react';\r\nimport '../stylesheets/Question.css';\r\nimport '../../public/art.svg';\r\n\r\nclass Question extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      visibleAnswer: false\r\n    }\r\n  }\r\n\r\n  flipVisibility() {\r\n    this.setState({visibleAnswer: !this.state.visibleAnswer});\r\n  }\r\n\r\n  render() {\r\n    const { question, answer, category, difficulty } = this.props;\r\n    return (\r\n      <div className=\"Question-holder\">\r\n        <div className=\"Question\">{question}</div>\r\n        <div className=\"Question-status\">\r\n          <img className=\"category\" src={`${category.toLowercase()}.svg`} alt={category} />\r\n          <div className=\"difficulty\">Difficulty: {difficulty}</div>\r\n          <img src=\"delete.png\" className=\"delete\" onClick={() => this.props.questionAction('DELETE')} alt=\"delete\" />\r\n          \r\n        </div>\r\n        <div className=\"show-answer button\"\r\n            onClick={() => this.flipVisibility()}>\r\n            {this.state.visibleAnswer ? 'Hide' : 'Show'} Answer\r\n          </div>\r\n        <div className=\"answer-holder\">\r\n          <span style={{\"visibility\": this.state.visibleAnswer ? 'visible' : 'hidden'}}>Answer: {answer}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React, { Component } from 'react'\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: '',\r\n  }\r\n\r\n  getInfo = (event) => {\r\n    event.preventDefault();\r\n    this.props.submitSearch(this.state.query)\r\n  }\r\n\r\n  handleInputChange = () => {\r\n    this.setState({\r\n      query: this.search.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.getInfo}>\r\n        <input\r\n          placeholder=\"Search questions...\"\r\n          ref={input => this.search = input}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <input type=\"submit\" value=\"Submit\" className=\"button\"/>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react';\r\n\r\nimport '../stylesheets/App.css';\r\nimport Question from './Question';\r\nimport Search from './Search';\r\nimport $ from 'jquery';\r\n\r\nclass QuestionView extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      questions: [],\r\n      page: 1,\r\n      totalQuestions: 0,\r\n      categories: {},\r\n      currentCategory: null,\r\n      api_url: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  getQuestions = () => {\r\n    $.ajax({\r\n      url: `${this.state.api_url}/questions?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          categories: result.categories,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions111. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectPage(num) {\r\n    this.setState({page: num}, () => this.getQuestions());\r\n  }\r\n\r\n  createPagination(){\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => {this.selectPage(i)}}>{i}\r\n        </span>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  getByCategory= (id) => {\r\n    $.ajax({\r\n      url: `${this.state.api_url}/categories/${id}/questions`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions222. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitSearch = (searchTerm) => {\r\n    $.ajax({\r\n      url: `${this.state.api_url}/questions`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({searchTerm: searchTerm}),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions333. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  questionAction = (id) => (action) => {\r\n    if(action === 'DELETE') {\r\n      if(window.confirm('are you sure you want to delete the question?')) {\r\n        $.ajax({\r\n          url: `${this.state.api_url}/questions/${id}`, //TODO: update request URL\r\n          type: \"DELETE\",\r\n          success: (result) => {\r\n            this.getQuestions();\r\n          },\r\n          error: (error) => {\r\n            alert('Unable to load questions444. Please try your request again')\r\n            return;\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"question-view\">\r\n        <div className=\"categories-list\">\r\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\r\n          <ul>\r\n            {Object.keys(this.state.categories).map((id, ) => (\r\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\r\n                {this.state.categories[id]}\r\n                <img className=\"category\" src={`${this.state.categories[id]}.svg`} alt=\"\"/>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <Search submitSearch={this.submitSearch}/>\r\n        </div>\r\n        <div className=\"questions-list\">\r\n          <h2>Questions</h2>\r\n          {this.state.questions.map((q, ind) => (\r\n            <Question\r\n              key={q.id}\r\n              question={q.question}\r\n              answer={q.answer}\r\n              category={this.state.categories[q.category]} \r\n              difficulty={q.difficulty}\r\n              questionAction={this.questionAction(q.id)}\r\n            />\r\n          ))}\r\n          <div className=\"pagination-menu\">\r\n            {this.createPagination()}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionView;\r\n","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../stylesheets/Header.css';\r\n\r\n\r\n\r\nclass Header extends Component {\r\n\r\n  navTo(uri){\r\n    window.location.href = window.location.origin + \"/#\" + uri;\r\n    if (window.location.origin === \"https://salstatice.github.io\") {\r\n      window.location.href = window.location.origin + \"/trivia-api/#\" + uri;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App-header\">\r\n        <img src={logo} alt=\"\" />\r\n        <h1 onClick={() => {this.navTo('')}}>Udacitrivia</h1>\r\n        <h2 onClick={() => {this.navTo('')}}>List</h2>\r\n        <h2 onClick={() => {this.navTo('/add')}}>Testing</h2>\r\n        <h2 onClick={() => {this.navTo('/play')}}>Play</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5; \r\n\r\nclass QuizView extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n        quizCategory: null,\r\n        previousQuestions: [], \r\n        showAnswer: false,\r\n        categories: {},\r\n        numCorrect: 0,\r\n        currentQuestion: {},\r\n        guess: '',\r\n        forceEnd: false,\r\n        api_url: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    $.ajax({\r\n      url: `${this.state.api_url}/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectCategory = ({type, id=0}) => {\r\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  getNextQuestion = () => {\r\n    const previousQuestions = [...this.state.previousQuestions]\r\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\r\n\r\n    $.ajax({\r\n      url: `${this.state.api_url}/quizzes`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        previous_questions: previousQuestions,\r\n        quiz_category: this.state.quizCategory\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          showAnswer: false,\r\n          previousQuestions: previousQuestions,\r\n          currentQuestion: result.question,\r\n          guess: '',\r\n          forceEnd: result.question ? false : true\r\n        })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitGuess = (event) => {\r\n    event.preventDefault();\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =  this.evaluateAnswer()\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true,\r\n    })\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [], \r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false\r\n    })\r\n  }\r\n\r\n  renderPrePlay(){\r\n      return (\r\n          <div className=\"quiz-play-holder\">\r\n              <div className=\"choose-header\">Choose Category</div>\r\n              <div className=\"category-holder\">\r\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\r\n                  {Object.keys(this.state.categories).map(id => {\r\n                  return (\r\n                    <div\r\n                      key={id}\r\n                      value={id}\r\n                      className=\"play-category\"\r\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\r\n                      {this.state.categories[id]}\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n          </div>\r\n      )\r\n  }\r\n\r\n  renderFinalScore(){\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\r\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\r\n    return answerArray.includes(formatGuess)\r\n  }\r\n\r\n  renderCorrectAnswer(){\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =  this.evaluateAnswer()\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\r\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderPlay(){\r\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\r\n      ? this.renderFinalScore()\r\n      : this.state.showAnswer \r\n        ? this.renderCorrectAnswer()\r\n        : (\r\n          <div className=\"quiz-play-holder\">\r\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n            <form onSubmit={this.submitGuess}>\r\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\r\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\r\n            </form>\r\n          </div>\r\n        )\r\n  }\r\n\r\n\r\n  render() {\r\n    return this.state.quizCategory\r\n        ? this.renderPlay()\r\n        : this.renderPrePlay()\r\n  }\r\n}\r\n\r\nexport default QuizView;\r\n","import React, { Component } from 'react';\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\n// import logo from './logo.svg';\r\nimport './stylesheets/App.css';\r\nimport FormView from './components/FormView';\r\nimport QuestionView from './components/QuestionView';\r\nimport Header from './components/Header';\r\nimport QuizView from './components/QuizView';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n\r\n    //debugger\r\n    console.log(\"HOST\", process.env.HOST)\r\n    console.log(\"API_URL\", process.env.API_URL)\r\n\r\n    const API_BASE_URL = \"testfromapp\";\r\n\r\n    return (\r\n    <div className=\"App\">\r\n      <Header path />\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={QuestionView} />\r\n          <Route path=\"/add\" component={FormView} />\r\n          <Route path=\"/play\" component={QuizView} />\r\n          <Route component={QuestionView} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n //\"start\": \"HOST='127.0.0.1' PORT='5000' react-scripts start\",\r\n"],"sourceRoot":""}